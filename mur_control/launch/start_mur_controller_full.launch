<launch>
    <!-- If you want to generate a ROS bag with the recorded simulated data, set this flag to true -->
    <arg name="record" default="false"/>

    <!-- Start the a underwater world simulation scenario -->
    <arg name="paused" default="true"/>
    <arg name="gui" default="true"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="worlds/GRMI_pool.world"/>
      <arg name="paused" value="true"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="headless" value="false"/>
      <arg name="debug" value="false"/>
      <arg name="verbose" value="true" />
    </include>

    <include file="$(find uuv_assistants)/launch/publish_world_ned_frame.launch"/>
    <!--include file="$(find grmi_worlds)/launch/GRMI_empty_world_ekf.launch"/-->

    <!-- Add the MUR vehicle to the simulation (namespace: mur) -->
    <include file="$(find mur_description)/launch/upload_mur.launch">
        <arg name="x" default="0.0"/>
        <arg name="y" default="0.0"/>
        <arg name="z" default="-0.95"/>
        <arg name="yaw" default="-1.57"/>
        <arg name="mode" default="ident"/>
        <arg name="namespace" default="mur"/>
    </include>

    <!-- Start the sensors-->
    <arg name="uuv_name" value="mur"/>
    <arg name="model_name" value="mur"/>
    <group ns="$(arg uuv_name)">
          <!--node pkg="mur_control" type="mur_altitude_control.py" name="mur_altitude_control" output="screen"></node-->
          <!--node pkg="mur_control" type="mur_attitude_control.py" name="mur_attitude_control" output="screen"></node-->
          <!--node pkg="mur_control" type="mur_position_control.py" name="mur_position_control" output="screen"></node-->
        <!--node pkg="mur_control" type="mur_aruco_detector.py" name="mur_aruco_detector" output="screen">
            <rosparam command="load" file="$(find mur_control)/config/head_camera.yaml" />
        </node-->
        <node pkg="mur_control" type="mur_barometer_parse.py" name="mur_barometer_parse" output="screen"></node>
        <!--node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
            <rosparam command="load" file="$(find mur_control)/config/ekf_template.yaml" />
        </node-->
        <!--node pkg="mur_control" type="mur_ekf.py" name="mur_ekf" output="screen"></node-->
        <!--node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
          <rosparam command="load" file="$(find mur_control)/config/ekf_template.yaml" />
          <remap from="odometry/filtered" to="/mur/Odometry"/>
        </node-->
        <node pkg="mur_control" type="mur_control_mixer.py" name="mur_control_mixer" output="screen"></node>
    </group>

    <!-- Start the recording node  -->
    <include file="$(find mur_control)/launch/record_demo.launch">
      <arg name="record" value="$(arg record)"/>
    </include>

    <!-- Open RViz for visualization of sensor data and visualization markers -->
    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find mur_control)/rviz/controller_demo.rviz"/>

    <!--
    You can run this demo as

    >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch

    and you can then send some waypoints to the vehicle to see it working

    >> roslaunch uuv_control_utils send_waypoints_file.launch uuv_name:=rexrov
    -->
</launch>
